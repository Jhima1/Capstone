def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

pipeline{
    agent any
    stages{
	stage('SonarQube analysis') {
 	   environment {
        	scannerHome = tool 'sonarscanner'
   	 	}	
    	    steps {
        	withSonarQubeEnv('SonarQube') {
            		sh "${scannerHome}/bin/sonar-scanner"
       		 }
    	}
	}
	stage('Build') {
            steps {
	        sh 'mvn clean package'
            }
        }
	stage('Pushing artifacts to Artifactory') {
	    steps {
                rtUpload (
                    serverId: 'artifactory',
                    spec: '''{
                        "files": [
                            {
                                "pattern": "target/*.jar",
                                "target": "libs-snapshot-local"
                            }
                        ]
                    }''',
                    buildName: "${env.JOB_NAME}",
                    buildNumber: "${env.BUILD_NUMBER}" 
                )
	    }
	}
	stage('Docker Build') {
            steps {
                script {
                    docker.build("jnaidu023/petclinic:${env.BUILD_ID}")
                }
            }
        }
        stage('Functional Testing') {
	        steps{
	            sh "docker run --name petclinic -d -p 8083:8080 jnaidu023/petclinic:${env.BUILD_ID}"
		    sh "python testing/test_pytest.py"
		    //sh "python testing/test_pytest.py"
	        }
	    }
	    stage('Pushing Docker Image to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker_credential') {
                        docker.image("jnaidu023/petclinic:${env.BUILD_ID}").push()
                        docker.image("jnaidu023/petclinic:${env.BUILD_ID}").push("latest")
                    }
                }
            }
        }
	stage('Deploy to Kubernetes') {
            steps{
                  sh "ansible-playbook deploy-playbook.yml"
            }
        }
        }
        post {
            always {
		sh "docker stop petclinic | true"
		sh "docker rm petclinic | true"
		sh "docker image prune -a -f | true"
                //slackSend channel: '#petclinic',
                    //color: COLOR_MAP[currentBuild.currentResult],
                    //message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}"
            }
        }
}

