def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

pipeline{
    agent any
    environment {
        PROJECT_ID = 'speedy-baton-262613'
        CLUSTER_NAME = 'capstone-cluster'
        LOCATION = 'us-central1-a'
        CREDENTIALS_ID = 'gke-capstone'
        NAMESPACE = 'capstone'
    }
    stages {
	stage ('Artifactory configuration') {
            steps {
                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "artifactory",
                    releaseRepo: "libs-release-local",
                    snapshotRepo: "libs-snapshot-local"
                )

                rtMavenResolver (
                    id: "MAVEN_RESOLVER",
                    serverId: "artifactory",
                    releaseRepo: "libs-release",
                    snapshotRepo: "libs-snapshot"
                )
            }
        }
	stage ('Exec Maven') {
            steps {
                rtMavenRun (
                    tool: 'maven',
                    pom: 'pom.xml',
                    goals: 'clean package -Dmaven.test.skip=true',
                    deployerId: "MAVEN_DEPLOYER",
                    resolverId: "MAVEN_RESOLVER"
                )
            }
        }
        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: "artifactory"
                )
            }
        }
	stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonarscanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }
	stage('Docker Build') {
            steps {
                script {
                    docker.build("jnaidu023/petclinic:${env.BUILD_ID}")
                }
            }
        }
        stage('Functional Testing') {
	        steps{
	            sh "docker run --name petclinic -d -p 80:80 jnaidu023/petclinic:${env.BUILD_ID}"
		        sh "pytest -v -s --html=functional_result.html testing/test_pytest.py"
	        }
	    }
	    stage('Pushing Docker Image to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker_credential') {
                        docker.image("jnaidu023/petclinic:${env.BUILD_ID}").push()
                        docker.image("jnaidu023/petclinic:${env.BUILD_ID}").push("latest")
                    }
                }
            }
        }
	stage('Deploy to GKE') {
            steps{
                sh "sed -i 's/petclinic:latest/petclinic:${env.BUILD_ID}/g' k8s-deployment.yml"
                step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'k8s-deployment.yml', credentialsId: env.CREDENTIALS_ID, namespace: env.NAMESPACE, verifyDeployments: true])
            }
        }
        }
        post {
            always {
		sh "docker stop petclinic | true"
		sh "docker rm petclinic | true"
		sh "docker image prune -a -f | true"
                slackSend channel: '#petclinic',
                    color: COLOR_MAP[currentBuild.currentResult],
                    message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}"
            }
        }
}

